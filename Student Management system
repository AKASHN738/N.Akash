#include <stdio.h>
#include <string.h>

// Define the Student struct
typedef struct {
    int id;
    char name[50];
    float grade;
} Student;

// Function prototypes
void addStudent(Student students[], int *count);
void displayStudents(Student students[], int count);
int findStudentById(Student students[], int count, int id);
void updateStudentGrade(Student students[], int count, int id, float newGrade);
void deleteStudent(Student students[], int *count, int id);
void sortStudentsById(Student students[], int count);
void sortStudentsByName(Student students[], int count);
void sortStudentsByGrade(Student students[], int count);

#define MAX_STUDENTS 100

int main() {
    Student students[MAX_STUDENTS];
    int studentCount = 0;
    int choice;
    int id;
    float grade;

    while (1) {
        printf("\nStudent Management System\n");
        printf("1. Add Student\n");
        printf("2. Display Students\n");
        printf("3. Update Student Grade\n");
        printf("4. Delete Student\n");
        printf("5. Sort Students\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent(students, &studentCount);
                break;
            case 2:
                displayStudents(students, studentCount);
                break;
            case 3:
                printf("Enter student ID to update grade: ");
                scanf("%d", &id);
                printf("Enter new grade: ");
                scanf("%f", &grade);
                updateStudentGrade(students, studentCount, id, grade);
                break;
            case 4:
                printf("Enter student ID to delete: ");
                scanf("%d", &id);
                deleteStudent(students, &studentCount, id);
                break;
            case 5:
                printf("Sort by:\n");
                printf("1. ID\n");
                printf("2. Name\n");
                printf("3. Grade\n");
                printf("Enter your choice: ");
                scanf("%d", &choice);
                if (choice == 1) {
                    sortStudentsById(students, studentCount);
                } else if (choice == 2) {
                    sortStudentsByName(students, studentCount);
                } else if (choice == 3) {
                    sortStudentsByGrade(students, studentCount);
                break;
            case 6:
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void addStudent(Student students[], int *count) {
    if (*count >= MAX_STUDENTS) {
        printf("Cannot add more students. Maximum limit reached.\n");
        return;
    }

    printf("Enter student ID: ");
    scanf("%d", &students[*count].id);
    printf("Enter student name: ");
    scanf(" %[^\n]", students[*count].name);  // To read string with spaces
    printf("Enter student grade: ");
    scanf("%f", &students[*count].grade);

    (*count)++;
    printf("Student added successfully!\n");
}

void displayStudents(Student students[], int count) {
    if (count == 0) {
        printf("No students to display.\n");
        return;
    }

    printf("\nList of Students:\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d, Name: %s, Grade: %.2f\n", students[i].id, students[i].name, students[i].grade);
    }
}

int findStudentById(Student students[], int count, int id) {
    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            return i;
        }
    }
    return -1;
}

void updateStudentGrade(Student students[], int count, int id, float newGrade) {
    int index = findStudentById(students, count, id);
    if (index == -1) {
        printf("Student with ID %d not found.\n", id);
        return;
    }

    students[index].grade = newGrade;
    printf("Student grade updated successfully!\n");
}

void deleteStudent(Student students[], int *count, int id) {
    int index = findStudentById(students, *count, id);
    if (index == -1) {
        printf("Student with ID %d not found.\n", id);
        return;
    }

    // Shift students to the left to fill the gap
    for (int i = index; i < *count - 1; i++) {
        students[i] = students[i + 1];
    }

    (*count)--;
    printf("Student deleted successfully!\n");
}

void sortStudentsById(Student students[], int count) {
    Student temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (students[i].id > students[j].id) {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;
            }
        }
    }
    printf("Students sorted by ID.\n");
}

void sortStudentsByName(Student students[], int count) {
    Student temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(students[i].name, students[j].name) > 0) {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;
            }
        }
    }
    printf("Students sorted by Name.\n");
}

void sortStudentsByGrade(Student students[], int count) {
    Student temp;
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (students[i].grade > students[j].grade) {
                temp = students[i];
                students[i] = students[j];
                students[j] = temp;
            }
        }
    }
    printf("Students sorted by Grade.\n");
}
